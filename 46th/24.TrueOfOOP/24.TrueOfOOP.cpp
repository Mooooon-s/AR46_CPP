// 24.TrueOfOOP.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//
//객체지향적 설계방법

//다른 사람의 코드를 볼때
//보통 로직을 보기보다는 함수를 보는 것이 좋음
//언제 로직을 봐야하는가 
//class만 쓴다고 해서 oop를 하는 것이 아님
//일단 필요한 함수를 만들고 그에 필요한 변수를 필요할때 마다 생성해야함
//변수를 먼저 만들면 나중에 끝도 없이 늘어남


//객체지향 프로그래밍이란?
//첫번째로 상태가 아닌 행동이 우선시 되어야함
//상태(변수)는 거들뿐
//맴버변수보다는 메버함수를 고민한다
//행동이 상태를 결정한다.
//현실세계를 모방한 프로그래밍같지만
//현실세계를일반화 하는 것은 아니다.
// 현실세계와는 다르게 프로그래밍이 가능하다라는 점을
// 꼭 기억하기
// 
//의존성을 줄여주는게 좋음
//객체 자기자신이 행동을 취하는게 안전함

//클래스 이름(하는 역할(책임))
//하는 역할(함수)에 기반하여 나눠야 한다.

//모든 객체는 자율적인 존재가 되어야함
//다른 객체가 대신 작업해주는것이 쌓이다 보면 문제가 발생할수도있음

//기능하고 구조를 잘 구분해서 사용해야함
//나중에 괜찮을까? 라는 의문을 가져야함
//재사용성이 용이한가 고민해야한다.





//사람과 콜라가 있다면
//사람은 콜라를 마신다.
class cola {
    int amount=100;
public:
    void Drink() {
        amount -= 10;
    }
};

class People {
public:
    bool Drinking();
};



#include <iostream>

int main()
{

    std::cout << "Hello World!\n";
}